django
-----------


python3.11 -m pip install virtualenv
python3.11 -m virtualenv venv 
venv\Scripts\activate.ps1 ---> to activae
deactivate --> to deactivate 
pip install django
django-admin help

django-admin startproject <project_name>
modify the top <project_name> to src


python manage.py runserver
copy the http url and paste it over google

we have 18 unapplied migrations
----------------------------------
migrations--> the python code that we write interact withe the database --> kind fo schemas

python manage.py migrate






under automax folder we have few essential files which makes our app to work like:
__init__.py --> basic python iniatializer to mark something as package
asgi.py  --> asynchronous server gateway interface  --> used to allow external applications to ineract with our django application
settings.py --> contains major setings for our djano app like secretkey,ALLOWED_HOSTS,INSTALLED_APPS,MIDDLEWARE,ROOT_URLCONF,TEMPLATES,WSGI_APPLICATION,DATABASES,AUTH_PASSWORD_VALIDAT, etc...
urls.py --> defines all the urls and paths that accessable
wsgi.py ---> used when we deploy our aplication to production. it serves as entry point for webservers to interact with our django app

we can create user in django admin panal
--------------------------------------------

python manage.py createsuperuser
<enter username and set password>

logic for creating mainpage(homepage)
------------------------------------
python manage.py startapp <app_name>
after that we need to modify the settings.py in <project_name> and add <app_name> additinally in INSTALLED_APPS array.
now a new app gets created with migration folder and few essential files which makes our app to work like:
migration
__init__.py ---> maps the folder as package
admin.py --> adds functionallity for our application
apps.py --> stores the info of secific file that we created <app_name>
models.py --> we can stire differenr types of models requires to our application. It allows us to define classes nd each class is resposinble for creating a table in db
tests.py --> used for placing a unit testing for our application
views.py --> functionallity were we can see whats going on i.e., hadelling of requests from user whiie accessing of this application. it is an endpoint of our application
	     views.py is responsible for showing main page 

now we had linked the <app_name> with <project_name> successfully by edditing the settings.py

creating a homepage using views.py(working with django views)
-------------------------------------
in views.py add the following code

from django.http import HttpResponse
from django.shortcuts import render

# Create your views here.
def main_view(request):
    return HttpResponse("<h1>Welcom to Automax </h1>")


after defining main_view function create a new urls.py in <app_name>

add the code in urls.py mentioned below
------------------------------------------
from django.urls import path
from .views import main_view

urlpatterns = [
    path('',main_view,name='main')
]


after adding the code we need to link this urls.py with <project_name> urls.py then only it will work
in base urls.py modify the code mentoned below


from django.contrib import admin
from django.urls import path, include

from main import urls as main_urls_path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include(main_urls_path))
]

then our homepage works well and good with title name
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
working with django templating
----------------------
create a new folder templates in main
after creating templates folder create a new folder views in templates 
in that template add main.html file

add the folllowing code
<h1> welcome to {{ name }}! :) </h1>

also modify the views.py as mentioned bellow
#using template file as request
def main_view(request):
    return render(request, "views/main.htm" , {'name' : 'autoMAX'})

------------------------------------------------------------------------------------
extending main.html(edit the html file its upto u)
---------------------
<html lang='en' class='h-100'>
<head>
    <h1> hello </h1>
</head>
<body>
    <h1> welcome to {{ name }}! :) </h1>
</body>

</html>
-------------------------------------------------------
after creating basic html we need to style the formate for that open the github repo
https://github.com/preneure/automax_django_web_app

copy the static folder which is present in src-main-static and paste it <folderhead>-->src-->main->(static) make sure u have css,images,js and videos
make sure u have bootstrap.min.css in css folder
after that modify the html file  mentioned below

{% load static %}

<html lang='en' class='h-100'>
<head>
    <meta charset="utf-8">
    <meta name="viewpoint" content="width=device-width,initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="madhan">

    <!--bootstrap core css-->
    <link href="{% static "css/bootstrap.min.css" %}" rel="stylesheet">
</head>
<body>
    <h1> welcome to {{ name }} :) </h1>
</body>


<footer class="footer text-muted bg-dark py-5">
    <div class="container">
        <p class="float-end mb-1">powered by <a href="https:/www.djangoproject.com/">Django</a></p>
        </p>
        <p class"mb-1"> AutomaX - Best place to buy and sell cars</p>
    </div>
</footer>

</html>




then u will see the basic boorstrap style formate 
-------------------------------------------------------------------------------






